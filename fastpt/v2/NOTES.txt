Extends psuedocode

- ctx_parentparent ctx = current_context.extend(child=self)
- 
- parent_dict = ctx.top()
- bound_parent = ctx.bind(parent)
- ctx.push()
- child_dict = ctx.top()
- bound_child = ctx.bind(child, omit='__call__')
- parent_dict.setdefault('next', bound_child)
- child_dict.setdefault('parent', bound_parent)
- result = bound_parent()
- ctx.pop()
- return result


I think this is wrong; we want the parent to execute in the child's context

Maybe let the template be a class, and a template+context be an object (instance of the class)?  Then 'self' in the context is the obj, and add foo=self.foo, bar=self.bar, etc. for methods?

fpt.Template is then a class factory, generating Template classes
